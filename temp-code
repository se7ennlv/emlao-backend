/* eslint-disable prettier/prettier */
import { HttpException, Injectable, InternalServerErrorException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { CreateAccountDto } from './dto/create-account.dto';
import { Account, AccountDocument } from './entities/account.entity';
import * as moment from 'moment';
import * as argon2 from 'argon2';
import { randomNumber } from 'src/common/utils/utils';
import { ConflictException, NotFoundException } from '@nestjs/common/exceptions';


@Injectable()
export class AccountsService {
  constructor(
    @InjectModel(Account.name) private accountModel: Model<AccountDocument>
  ) { }


  async create(createDto: CreateAccountDto) {
    try {
      const isExist = await this.checkAccount(createDto.username);

      if (isExist) {
        throw new ConflictException('ອີເມລນີ້ຖືກນຳໃຊ້ແລ້ວ, ກະລຸນາລອງອີເມລອື່ນ');
      } else {
        const now = new Date();
        const fullDate = moment(now).format('YYYY-MM-DD HH:mm:ss');

        const passwordHash = await argon2.hash(createDto.password);
        const accountNo = randomNumber(100000000, 999999999);
        const pin = randomNumber(1000, 9999);

        const create = {
          accountNo: accountNo,
          pin: pin,
          username: createDto.username,
          password: passwordHash,
          role: createDto.role,
          createdAt: moment.utc(fullDate),
          updatedAt: moment.utc(fullDate)
        };

        const model = new this.accountModel(create);
        const result = await model.save();
      }
    } catch (error) {
      if (error.status) {
        throw new HttpException(error.message, error.status);
      }

      throw new InternalServerErrorException('ເກີດຂໍ້ຜິດພາດ!');
    }
  }

  async findOne(username: string) {
    try {
      const filter = { username: username };
      const account = await this.accountModel.findOne(filter).select('+password').exec();

      if (account) {
        return account;
      }

      throw new NotFoundException('ບໍ່ພົບຂໍ້ມູນ!');
    } catch (error) {

    }
  }

  async checkAccount(username: string) {
    try {
      const filter = { username: username };
      const count = await this.accountModel.countDocuments(filter).exec();
      return count;
    } catch (error) {
      throw new InternalServerErrorException('ບໍ່ສາມາດດຳເນີນການໄດ້!');
    }
  }

}
