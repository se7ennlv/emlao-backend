import { errorMessages } from 'src/config/message.config';
import { randomNumber } from 'src/common/utils/utils';
/* eslint-disable prettier/prettier */
import { dateFormat } from 'src/config/date.config';
import { Injectable, InternalServerErrorException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import mongoose, { Model } from 'mongoose';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { Product, ProductDocument } from './entities/product.entity';
import * as moment from 'moment';
import { User } from 'src/core/users/entities/user.entity';


@Injectable()
export class ProductsService {
  constructor(@InjectModel(Product.name) private productModel: Model<ProductDocument>) { }


  async create(createDto: CreateProductDto, user: User) {
    try {
      const now = new Date();
      const fullDate = moment(now).format(dateFormat.format1);

      const categoryId = new mongoose.Types.ObjectId(createDto.category);
      const prodCode = 'P' + randomNumber(1000, 9999);

      const create = {
        shop: user?._id,
        category: categoryId,
        code: prodCode,
        name: createDto.name,
        description: createDto.description,
        price: createDto.price,
        createdAt: moment.utc(fullDate),
        updatedAt: moment.utc(fullDate)
      };

      const model = new this.productModel(create);
      const result = await model.save();

      return result;
    } catch (error) {
      throw new InternalServerErrorException(errorMessages[500]);
    }
  }

  async findAll(user: User) {
    try {
      const shopId = new mongoose.Types.ObjectId(user?._id);
      const filter = { shop: shopId };
      const products = this.productModel.find(filter).exec();

      return products;
    } catch (error) {
      throw new InternalServerErrorException(errorMessages[500]);
    }
  }

  findOne(id: number) {
    return `This action returns a #${id} product`;
  }

  update(id: number, updateProductDto: UpdateProductDto) {
    return `This action updates a #${id} product`;
  }

  remove(id: number) {
    return `This action removes a #${id} product`;
  }
}
